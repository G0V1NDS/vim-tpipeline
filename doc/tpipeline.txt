*tpipeline.txt*	Outsource your statusline to tmux
*tpipeline*

CONTENTS						*tpipeline-contents*

Introduction					|tpipeline-introduction|
Tmux Integration				|tpipeline-tmux|
Configuration					|tpipeline-configure|
Api						|tpipeline-api|

==============================================================================
INTRODUCTION						*tpipeline-introduction*

The |tpipeline| plugin embeds your vim statusline into your tmux statusline.
This plugin also comes with its own statusline that you can use independently
of the tmux functionality.

------------------------------------------------------------------------------
TMUX INTEGRATION					*tpipeline-tmux*

|tpipeline| creates a bridge to tmux as a file in the filesystem.
Use the following block in your tmux config to use it:
>
	set -g focus-events on
	set -g status-style bg=default
	set -g status-left '#(cat #{socket_path}-\#{session_id}-vimbridge)'
	set -g status-left-length 100
	set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'
	set -g status-right-length 100
	set -g status-justify centre
<

------------------------------------------------------------------------------
Configuration						*tpipeline-configure*

	g:tpipeline_statusline				*g:tpipeline_statusline*
		By default, |tpipeline| will copy your vim |statusline| but if
		you want to use a different statusline, set this variable
		instead.
>
			let g:tpipeline_statusline = '%!tpipeline#stl#line()'
			let g:tpipeline_statusline = '%f'
<

	g:tpipeline_split				*g:tpipeline_split*
		By default |tpipeline| will create separate files for the left
		and right part of your statusline.
		If you prefer to merge both parts of your statusline into one
		single chunk, then set `let g:tpipeline_split = 0` and use the
		following tmux config:
>
			set -g focus-events on
			set -g status-style bg=default
			set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge)'
			set -g status-right-length 100
<

	g:tpipeline_progresslen				*g:tpipeline_progresslen*
		If you use the default |tpipeline| statusline, it comes with a
		progress widget. You can set the length of this widget by
		defining this variable with `let g:tpipeline_progresslen = 10`

	g:tpipeline_focuslost				*g:tpipeline_focuslost*
		If you don't want to respond to `FocusLost` signals, set this
		variable using `let g:tpipeline_focuslost = 0`

	g:tpipeline_cursormoved				*g:tpipeline_cursormoved*
		If you want to have the statusline update while moving the
		cursor, use `let g:tpipeline_cursormoved = 1` which will set
		the |CursorMoved| autocmd. Note that when using neovim this can
		cause some performance problems with some configurations. You
		can fix these problems by setting `set guicursor=` which will
		disable the DECSCUSR feature that sometimes doesn't work well
		in tmux. In all other cases this feature can safely be enabled.

	g:tpipeline_tabline				*g:tpipeline_tabline*
		By default if |g:tpipeline_statusline| is not set, the plugin
		will copy your |statusline|.
		If you instead want it to copy your |tabline| set this variable
		using `let g:tpipeline_tabline = 1`

	g:tpipeline_preservebg				*g:tpipeline_preservebg*
		By default the statusline will be prepended with a color
		definition such that the statusline in tmux reflects the colors
		of your vim statusline as defined in the |hl-StatusLine|
		highlight group.
		If you do not want to have this plugin mess with your tmux
		statusline color, you can disable this behaviour by setting
		`let g:tpipeline_preservebg = 1` but take in mind that in this
		case the embedded statusline will follow your tmux default
		colors and can in some cases even become invisible.

------------------------------------------------------------------------------
Api							*tpipeline-api*

	tpipeline#update()				*tpipeline#update()*
		This hook provides a way to update the tmux statusline from the
		outside.

	tpipeline#state#freeze()			*tpipeline#state#freeze()*
		Disables all updates of the tmux statusline until you call
		|tpipeline#state#thaw()|.

	tpipeline#state#thaw()				*tpipeline#state#thaw()*
		Reenables all updates of the tmux statusline after they were
		disabled using |tpipeline#state#freeze()|.

==============================================================================
	vim:tw=78:sw=4:ts=8:ft=help:norl:noet:
